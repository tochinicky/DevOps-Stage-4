version: "3"

services:
  traefik:
    image: traefik:v3.1.6
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true" # Enable Traefik's dashboard
      - "--api.insecure=true" # Optional: Only for local testing. Use secure access in production.
      - "--providers.docker=true" # Enable Docker provider to discover containers
      # - "--entrypoints.web.address=:80" # Define HTTP entrypoint
      # - "--entrypoints.websecure.address=:443" # Define HTTPS entrypoint
      # - "--certificatesresolvers.mytls.acme.tlschallenge=true" # Enable TLS challenge for certs
      # - "--certificatesresolvers.mytls.acme.email=tochinicky@gmail.com" # Your email for ACME
      # - "--certificatesresolvers.mytls.acme.storage=/letsencrypt/acme.json" # Store certs and ensures renewal
      # - "--entrypoints.web.http.redirections.entryPoint.to=websecure" # Redirect HTTP to HTTPS
      # - "--entrypoints.web.http.redirections.entryPoint.scheme=https" # Ensure redirection uses HTTPS
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--providers.file.filename=/traefik_dynamic.yml"
    ports:
      - "80:80" # Expose HTTP port
      - "443:443" # Expose HTTPS port
      # - "8080:8080"  # Expose dashboard on port 8080

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # Docker socket for Traefik to access containers
      - "./certs:/certs:ro" # SSL certs for HTTPS
      - "./traefik_dynamic.yml:/traefik_dynamic.yml:ro"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - AUTH_API_ADDRESS=http://auth-api:8081
      - TODOS_API_ADDRESS=http://todos-api:8082
    depends_on:
      - auth-api
      - todos-api
    command: npm run dev

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.entrypoints=websecure" # Ensure traffic is served over HTTPS
      - "traefik.http.routers.frontend.rule=Host(`devopshng.online`)" # Domain for the frontend service

  auth-api:
    build:
      context: ./auth-api
      dockerfile: Dockerfile
    container_name: auth-api
    ports:
      - "${AUTH_API_PORT}:8081"
    env_file:
      - .env
    depends_on:
      - users-api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.entrypoints=websecure" # Ensure traffic is served over HTTPS
      - "traefik.http.routers.auth.rule=Host(`auth.devopshng.online`)" # Domain for the auth service

  todos-api:
    build:
      context: ./todos-api
      dockerfile: Dockerfile
    container_name: todos-api
    ports:
      - "8082:8082"
    environment:
      - TODOS_API_PORT=${TODOS_API_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_CHANNEL=${REDIS_CHANNEL}
    depends_on:
      - redis-queue
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.todos.entrypoints=websecure" # Ensure traffic is served over HTTPS
      - "traefik.http.routers.todos.rule=Host(`todos.devopshng.online`)" # Domain for the todos service

  users-api:
    build:
      context: ./users-api
      dockerfile: Dockerfile
    container_name: users-api
    ports:
      - "8083:8083"
    environment:
      - SERVER_PORT=${SERVER_PORT}
      - JWT_SECRET=${JWT_SECRET}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.users.entrypoints=websecure" # Ensure traffic is served over HTTPS
      - "traefik.http.routers.users.rule=Host(`users.devopshng.online`)" # Domain for the users service

  log-processor:
    build:
      context: ./log-message-processor
      dockerfile: Dockerfile
    container_name: log-processor
    ports:
      - "9090:9090"
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_CHANNEL=${REDIS_CHANNEL}
    depends_on:
      - redis-queue
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"

  redis-queue:
    image: redis:alpine
    container_name: redis-queue
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  redis_data:

networks:
  default:
    name: app_network
    external: true
